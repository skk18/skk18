diff --git a/sitewide_alert/config/install/sitewide_alert.settings.yml b/sitewide_alert/config/install/sitewide_alert.settings.yml
index 5cfbc93..3ebe11a 100644
--- a/sitewide_alert/config/install/sitewide_alert.settings.yml
+++ b/sitewide_alert/config/install/sitewide_alert.settings.yml
@@ -1,5 +1,6 @@
 show_on_admin: 0
 alert_styles: 'primary|Default'
+alert_priorities: 'primary|Default'
 refresh_interval: 15
 automatic_refresh: 1
 cache_max_age: 15
diff --git a/sitewide_alert/config/schema/sitewide_alert.shema.yml b/sitewide_alert/config/schema/sitewide_alert.shema.yml
index 60ea249..cabdc8d 100644
--- a/sitewide_alert/config/schema/sitewide_alert.shema.yml
+++ b/sitewide_alert/config/schema/sitewide_alert.shema.yml
@@ -8,6 +8,9 @@ sitewide_alert.settings:
     alert_styles:
       type: 'string'
       label: 'Available alert styles'
+    alert_priorities:
+      type: 'string'
+      label: 'Available alert priority'
     refresh_interval:
       type: 'integer'
       label: 'Browser Refresh Interval (in seconds)'
diff --git a/sitewide_alert/sitewide_alert.module b/sitewide_alert/sitewide_alert.module
index c2a32ca..6a194d6 100644
--- a/sitewide_alert/sitewide_alert.module
+++ b/sitewide_alert/sitewide_alert.module
@@ -50,12 +50,15 @@ function template_preprocess_sitewide_alert(&$variables) {
   $variables['uuid'] = $sitewideAlert->uuid();
   $variables['is_dismissible'] = $sitewideAlert->isDismissible();
   $variables['style'] = $sitewideAlert->getStyle();
+  $variables['priority'] = $sitewideAlert->getPriority();
   $variables['style_class'] = $sitewideAlert->getStyleClass();
+  $variables['priority_class'] = $sitewideAlert->getPriorityClass();
 
   $variables['attributes']['class'] = [
     'sitewide-alert',
     'alert',
     $sitewideAlert->getStyleClass(),
+    $sitewideAlert->getPriorityClass(),
   ];
 
   // The data-uuid attribute is needed for the dynamic loading via JS to work.
@@ -77,8 +80,10 @@ function sitewide_alert_theme_suggestions_sitewide_alert(array $variables) {
   $sitewideAlert = $variables['elements']['#sitewide_alert'];
 
   $suggestions[] = 'sitewide_alert__' . $sitewideAlert->getStyle();
+  $suggestions[] = 'sitewide_alert__' . $sitewideAlert->getPriority();
   $suggestions[] = 'sitewide_alert__' . ($sitewideAlert->isDismissible() ? 'dismissible' : 'notdismissible');
   $suggestions[] = 'sitewide_alert__' . $sitewideAlert->getStyle() . '__' . ($sitewideAlert->isDismissible() ? 'dismissible' : 'notdismissible');
+  $suggestions[] = 'sitewide_alert__' . $sitewideAlert->getPriority() . '__' . ($sitewideAlert->isDismissible() ? 'dismissible' : 'notdismissible');
 
   return $suggestions;
 }
diff --git a/sitewide_alert/src/Controller/SitewideAlertsController.php b/sitewide_alert/src/Controller/SitewideAlertsController.php
index 433b893..61b8ead 100644
--- a/sitewide_alert/src/Controller/SitewideAlertsController.php
+++ b/sitewide_alert/src/Controller/SitewideAlertsController.php
@@ -89,6 +89,7 @@ class SitewideAlertsController extends ControllerBase {
         'dismissible' => $sitewideAlert->isDismissible(),
         'dismissalIgnoreBefore' => $sitewideAlert->getDismissibleIgnoreBeforeTime(),
         'styleClass' => $sitewideAlert->getStyleClass(),
+        'priorityClass' => $sitewideAlert->getPriorityClass(),
         'showOnPages' => $sitewideAlert->getPagesToShowOn(),
         'negateShowOnPages' => $sitewideAlert->shouldNegatePagesToShowOn(),
         'renderedAlert' => $this->renderer->renderPlain($alertView),
diff --git a/sitewide_alert/src/Entity/SitewideAlert.php b/sitewide_alert/src/Entity/SitewideAlert.php
index f31c538..ac7a7dc 100644
--- a/sitewide_alert/src/Entity/SitewideAlert.php
+++ b/sitewide_alert/src/Entity/SitewideAlert.php
@@ -273,6 +273,23 @@ class SitewideAlert extends EditorialContentEntityBase implements SitewideAlertI
       ->setDisplayConfigurable('form', FALSE)
       ->setDisplayConfigurable('view', FALSE)
       ->setRequired(TRUE);
+	  
+	$fields['priority'] = BaseFieldDefinition::create('list_string')
+      ->setLabel(new TranslatableMarkup('Alert Priority'))
+      ->setDescription(new TranslatableMarkup('The priority of this alert. This mainly can be used to change the color of the alert.'))
+      ->setSettings([
+        'allowed_values_function' => '\Drupal\sitewide_alert\AlertPriorityProvider::alertPriorities',
+      ])
+      ->setDisplayOptions('form', [
+        'type' => 'options_select',
+        'weight' => -14,
+      ])
+      ->setDisplayOptions('view', [
+        'region' => 'hidden',
+      ])
+      ->setDisplayConfigurable('form', FALSE)
+      ->setDisplayConfigurable('view', FALSE)
+      ->setRequired(TRUE);
 
     $fields['dismissible'] = BaseFieldDefinition::create('boolean')
       ->setLabel(new TranslatableMarkup('Dismissible'))
@@ -492,6 +509,19 @@ class SitewideAlert extends EditorialContentEntityBase implements SitewideAlertI
     return Html::cleanCssIdentifier('alert-' . $this->get('style')->value);
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getPriority(): string {
+    return $this->get('priority')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPriorityClass(): string {
+    return Html::cleanCssIdentifier('alert-' . $this->get('priority')->value);
+  }
   /**
    * {@inheritdoc}
    */
diff --git a/sitewide_alert/src/Entity/SitewideAlertInterface.php b/sitewide_alert/src/Entity/SitewideAlertInterface.php
index b577194..31c7e73 100644
--- a/sitewide_alert/src/Entity/SitewideAlertInterface.php
+++ b/sitewide_alert/src/Entity/SitewideAlertInterface.php
@@ -137,6 +137,22 @@ interface SitewideAlertInterface extends ContentEntityInterface, RevisionLogInte
    */
   public function getStyleClass(): string;
 
+  /**
+   * Gets the pages to show on.
+   *
+   * @return array
+   *   The patterns of pages to show on.
+   */
+  public function getPriority(): string;
+
+  /**
+   * Gets the priority class to use for the alert.
+   *
+   * @return string
+   *   The priority class to use.
+   */
+  public function getPriorityClass(): string;
+
   /**
    * Gets the pages to show on.
    *
diff --git a/sitewide_alert/src/Form/SitewideAlertConfigForm.php b/sitewide_alert/src/Form/SitewideAlertConfigForm.php
index 5ff0ae6..557ab55 100644
--- a/sitewide_alert/src/Form/SitewideAlertConfigForm.php
+++ b/sitewide_alert/src/Form/SitewideAlertConfigForm.php
@@ -96,6 +96,16 @@ class SitewideAlertConfigForm extends ConfigFormBase {
           'Enter the list of key|value pairs of alert styles separated by new line, where key is the alert style class name without prefix, and the value is displayed to the alert editor. <br/><strong>For example:</strong><ul><li>To add the class <em>alert-info</em>, use <code>info|Info</code></li><li>To add the class <em>alert-danger</em>, use <code>danger|Very Important</code></li></ul><strong>Warning!</strong> Pre-existing values will be reset.'
       ) . '<br><br></p>',
     ];
+	
+	
+	$form['alert_priority'] = [
+      '#type' => 'textarea',
+      '#title' => $this->t('Available alert priority'),
+      '#default_value' => $config->get('alert_priority'),
+      '#description' => '<p>' . $this->t(
+          'Enter the list of key|value pairs of alert priority separated by new line, where key is the alert priority class name without prefix, and the value is displayed to the alert editor. <br/><strong>For example:</strong><ul><li>To add the class <em>alert-info</em>, use <code>info|Info</code></li><li>To add the class <em>alert-danger</em>, use <code>danger|Very Important</code></li></ul><strong>Warning!</strong> Pre-existing values will be reset.'
+      ) . '<br><br></p>',
+    ];
 
     $form['automatic_refresh'] = [
       '#type' => 'checkbox',
@@ -145,6 +155,7 @@ class SitewideAlertConfigForm extends ConfigFormBase {
     $this->config('sitewide_alert.settings')
       ->set('show_on_admin', $form_state->getValue('show_on_admin'))
       ->set('alert_styles', $form_state->getValue('alert_styles'))
+      ->set('alert_priority', $form_state->getValue('alert_priority'))
       ->set('refresh_interval', $form_state->getValue('refresh_interval'))
       ->set('automatic_refresh', $form_state->getValue('automatic_refresh'))
       ->set('cache_max_age', $form_state->getValue('cache_max_age'))
diff --git a/sitewide_alert/src/SitewideAlertListBuilder.php b/sitewide_alert/src/SitewideAlertListBuilder.php
index 6e0249d..2ceedef 100644
--- a/sitewide_alert/src/SitewideAlertListBuilder.php
+++ b/sitewide_alert/src/SitewideAlertListBuilder.php
@@ -21,6 +21,7 @@ class SitewideAlertListBuilder extends EntityListBuilder {
   public function buildHeader(): array {
     $header['name'] = $this->t('Name');
     $header['style'] = $this->t('Style');
+    $header['priority'] = $this->t('Priority');
     $header['active'] = $this->t('Active');
     $header['scheduled'] = $this->t('Scheduled');
     return $header + parent::buildHeader();
@@ -37,6 +38,7 @@ class SitewideAlertListBuilder extends EntityListBuilder {
       ['sitewide_alert' => $entity->id()]
     );
     $row['style'] = AlertStyleProvider::alertStyleName($entity->getStyle());
+    $row['priority'] = AlertPriorityProvider::alertPriorityName($entity->getPriority());
     $row['active'] = $entity->isPublished() ? '✔' : '✘';
     $row['scheduled'] = $entity->isScheduled() ? '✔' : '✘';
     return $row + parent::buildRow($entity);
